<?xml version="1.0" encoding="UTF-8"?>

<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <groupId>com.tyy</groupId>
  <artifactId>spark2</artifactId>
  <version>1.0</version>

  <name>spark2</name>
  <!-- FIXME change it to the project's website -->
  <url>http://www.example.com</url>

  <properties>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <maven.compiler.source>1.8</maven.compiler.source>
    <maven.compiler.target>1.8</maven.compiler.target>
  </properties>

  <dependencies>
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>4.13.1</version>
    </dependency>
    <!-- https://mvnrepository.com/artifact/com.alibaba/druid -->
    <dependency>
      <groupId>com.alibaba</groupId>
      <artifactId>druid</artifactId>
      <version>1.1.16</version>
    </dependency>

    <dependency>
      <groupId>opencv</groupId>
      <artifactId>opencv</artifactId>
      <version>3.4.7</version>
    </dependency>
    <!-- https://mvnrepository.com/artifact/org.apache.spark/spark-streaming-kafka-0-10 -->
    <!--		必须在sql之前，不明觉厉-->
    <dependency>
      <groupId>org.apache.spark</groupId>
      <!--            11是scala的版本-->
      <artifactId>spark-sql-kafka-0-10_2.11</artifactId>
      <version>2.3.0</version>
    </dependency>
    <dependency>
      <groupId>org.apache.spark</groupId>
      <artifactId>spark-sql_2.11</artifactId>
      <version>2.3.0</version>
    </dependency>
    <dependency>
        <groupId>log4j</groupId>
        <artifactId>log4j</artifactId>
        <version>1.2.17</version>
        <scope>compile</scope>
    </dependency>
    <dependency>
      <groupId>org.projectlombok</groupId>
      <artifactId>lombok</artifactId>
      <version>1.16.18</version>
      <scope>provided</scope>
    </dependency>
    <dependency>
      <groupId>ch.qos.logback</groupId>
      <artifactId>logback-classic</artifactId>
      <version>1.2.3</version>
    </dependency>
    <dependency>
      <groupId>mysql</groupId>
      <artifactId>mysql-connector-java</artifactId>
      <version>8.0.18</version>
    </dependency>
  </dependencies>

  <build>
      <!--   1. 配置资源目录-->
      <resources>
        <resource>
          <directory>${basedir}/src/resources</directory>
        </resource>
      </resources>
      <plugins>
        <!--打包跳过测试类-->
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-surefire-plugin</artifactId>
          <configuration>
            <testFailureIgnore>true</testFailureIgnore>
            <skip>true</skip>
          </configuration>
        </plugin>
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-compiler-plugin</artifactId>
          <configuration>
            <source>8</source>
            <target>8</target>
          </configuration>
        </plugin>
        <plugin>
          <artifactId>maven-clean-plugin</artifactId>
          <version>3.1.0</version>
        </plugin>
        <!--    1.         指定启动类，将依赖打成外部jar包 -->
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-jar-plugin</artifactId>
          <configuration>
            <!-- 将静态资源排除出jar包 -->
            <excludes>
              <exclude>video/*</exclude>
              <exclude>video/4k2/*</exclude>
              <exclude>video/4k6/*</exclude>
              <exclude>video/4k9/*</exclude>
            </excludes>
            <archive>
              <!-- 生成的jar中，不要包含pom.xml和pom.properties这两个文件 -->
              <addMavenDescriptor>false</addMavenDescriptor>
              <manifest>
                <!-- 是否要把第三方jar加入到类构建路径 -->
                <addClasspath>true</addClasspath>
                <!-- 外部依赖jar包的最终位置 -->
                <classpathPrefix>/home/user/Apache/App2/tracker/lib/</classpathPrefix>
                <useUniqueVersions>false</useUniqueVersions>
                <!-- 项目启动类 -->
                <mainClass>ReadPhoto</mainClass>
              </manifest>
              <manifestEntries>
                <!--MANIFEST.MF 中 Class-Path 加入资源文件目录 -->
                <Class-Path>config/</Class-Path>
              </manifestEntries>
            </archive>
            <!-- 指定打出的jar包路径 -->
            <outputDirectory>${project.build.directory}</outputDirectory>
          </configuration>
        </plugin>


        <!--2.拷贝依赖到jar外面的lib目录-->
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-dependency-plugin</artifactId>
          <executions>
            <execution>
              <id>copy-lib</id>
              <phase>package</phase>
              <goals>
                <goal>copy-dependencies</goal>
              </goals>
              <configuration>
                <outputDirectory>target/lib</outputDirectory>
                <excludeTransitive>false</excludeTransitive>
                <stripVersion>false</stripVersion>
                <includeScope>compile</includeScope>
              </configuration>
            </execution>
          </executions>
        </plugin>
        <plugin>
          <!--                3..拷贝资源到外面的config目录下-->
          <artifactId>maven-resources-plugin</artifactId>
          <executions>
            <execution>
              <!-- 自定义 -->
              <id>copy-resources</id>
              <phase>package</phase>
              <goals>
                <!-- 复制静态资源 -->
                <goal>copy-resources</goal>
              </goals>
              <configuration>
                <resources>
                  <resource>
                    <!-- 指定静态资源的路径 -->
                    <directory>src/main/resources</directory>
                    <!-- 指定需要复制的文件 -->
                  </resource>
                </resources>
                <!-- 指定复制到该目录下 -->
                <outputDirectory>${project.build.directory}/config</outputDirectory>
              </configuration>
            </execution>
          </executions>
        </plugin>
      </plugins>
    </build>
</project>
